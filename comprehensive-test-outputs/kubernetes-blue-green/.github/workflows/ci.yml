name: CI Pipeline
'on':
  push:
    branches:
    - master
    - main
    - develop
  pull_request:
    branches:
    - master
    - main
    - develop
env:
  APP_NAME: myapp
  NAMESPACE: production
  NEW_COLOR: '${env.BRANCH_NAME == ''main'' ? ''blue'' : ''green''}'
  OLD_COLOR: '${env.BRANCH_NAME == ''main'' ? ''green'' : ''blue''}'
permissions:
  contents: read
  actions: read
  security-events: write
  deployments: write
  checks: write
jobs:
  deploy-new-version:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: deployment-deploy-new-version
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v4
    - name: Run Deploy New Version
      uses: ./.github/actions/deploy-new-version
      timeout-minutes: 30
  health-check-new-version:
    runs-on: ubuntu-latest
    needs: deploy-new-version
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Health Check New Version
      uses: ./.github/actions/health-check-new-version
      timeout-minutes: 30
  smoke-tests:
    runs-on: ubuntu-latest
    needs: health-check-new-version
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Smoke Tests
      uses: ./.github/actions/smoke-tests
      timeout-minutes: 30
  switch-traffic:
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Switch Traffic
      uses: ./.github/actions/switch-traffic
      timeout-minutes: 30
  verify-traffic-switch:
    runs-on: ubuntu-latest
    needs: switch-traffic
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Verify Traffic Switch
      uses: ./.github/actions/verify-traffic-switch
      timeout-minutes: 30
  cleanup-old-version:
    runs-on: ubuntu-latest
    needs: verify-traffic-switch
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Cleanup Old Version
      uses: ./.github/actions/cleanup-old-version
      timeout-minutes: 30
  pipeline-post:
    name: Pipeline Post Actions
    runs-on: ubuntu-latest
    needs:
    - deploy-new-version
    - health-check-new-version
    - smoke-tests
    - switch-traffic
    - verify-traffic-switch
    - cleanup-old-version
    if: always()
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - name: Pipeline post failure
      if: failure()
      run: echo "Deployment failed, keeping old version active"
      shell: bash
    - name: Pipeline post failure
      if: failure()
      run: kubectl patch service ${APP_NAME} -n ${NAMESPACE}  -p '{"spec":{"selector":{"color":"'${OLD_COLOR}'"}}}'
      shell: bash
    - name: Pipeline post failure
      if: failure()
      run: echo Deployment failed, keeping old version active
      shell: bash
