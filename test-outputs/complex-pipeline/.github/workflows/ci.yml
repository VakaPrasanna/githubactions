name: CI Pipeline
'on':
  push:
    branches:
    - master
    - main
    - develop
  pull_request:
    branches:
    - master
    - main
    - develop
  workflow_dispatch:
    inputs:
      VERSION:
        description: Version number
        required: false
        default: 1.0.0
        type: string
      SKIP_TESTS:
        description: Skip test execution
        required: false
        default: false
        type: boolean
      BUILD_TYPE:
        description: Type of build
        required: false
        default: release
        type: choice
        options:
        - release
        - snapshot
        - hotfix
env:
  MAVEN_OPTS: -Xmx2048m -XX:MaxPermSize=512m
  SONAR_HOST_URL: https://sonarqube.company.com
  ARTIFACTORY_URL: https://artifactory.company.com
  DOCKER_REGISTRY: registry.company.com
  APP_NAME: complex-app
  BUILD_VERSION: ${{ inputs.VERSION }}-${{ env.BUILD_NUMBER }}
permissions:
  contents: read
  actions: read
  security-events: write
  deployments: write
  checks: write
jobs:
  initialize:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Initialize
      uses: ./.github/actions/initialize
    continue-on-error: true
  static-analysis:
    runs-on: ubuntu-latest
    needs: initialize
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Run Static Analysis
      uses: ./.github/actions/static-analysis
      with:
        sonar-token: ${{ secrets.SONAR_TOKEN }}
        sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
  security-scan:
    runs-on: ubuntu-latest
    needs: initialize
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Security Scan
      uses: ./.github/actions/security-scan
    continue-on-error: true
  license-check:
    runs-on: ubuntu-latest
    needs: initialize
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run License Check
      uses: ./.github/actions/license-check
  quality-gate:
    runs-on: ubuntu-latest
    needs:
    - static-analysis
    - security-scan
    - license-check
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Quality Gate
      uses: ./.github/actions/quality-gate
    continue-on-error: true
  build-test:
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Build & Test
      uses: ./.github/actions/build-test
    continue-on-error: true
  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Docker Build
      uses: ./.github/actions/docker-build
  deploy-to-staging:
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: staging
    if: 'true  # MANUAL CONVERSION REQUIRED: Complex when condition'
    needs: docker-build
    timeout-minutes: 60
    concurrency:
      group: deployment-deploy-to-staging
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v4
    - name: Run Deploy to Staging
      uses: ./.github/actions/deploy-to-staging
      with:
        k8s-staging: ${{ secrets.K8S_STAGING }}
        deploy-env: ${{ env.DEPLOY_ENV }}
      timeout-minutes: 30
  integration-tests:
    runs-on: ubuntu-latest
    if: always() && (needs.docker-build.result == 'success' || needs.docker-build.result == 'failure')
    needs:
    - docker-build
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Integration Tests
      uses: ./.github/actions/integration-tests
  performance-tests:
    runs-on: ubuntu-latest
    if: always() && (needs.docker-build.result == 'success' || needs.docker-build.result == 'failure')
    needs:
    - docker-build
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Performance Tests
      uses: ./.github/actions/performance-tests
  production-approval:
    runs-on: ubuntu-latest
    if: always() && (needs.docker-build.result == 'success' || needs.docker-build.result == 'failure')
    needs:
    - docker-build
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Production Approval
      uses: ./.github/actions/production-approval
  deploy-to-production:
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: production
    if: always() && (needs.docker-build.result == 'success' || needs.docker-build.result == 'failure')
    needs:
    - docker-build
    timeout-minutes: 60
    concurrency:
      group: deployment-deploy-to-production
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v4
    - name: Run Deploy to Production
      uses: ./.github/actions/deploy-to-production
      with:
        k8s-production: ${{ secrets.K8S_PRODUCTION }}
        deploy-env: ${{ env.DEPLOY_ENV }}
      timeout-minutes: 30
  post-deploy-validation:
    runs-on: ubuntu-latest
    if: always() && (needs.docker-build.result == 'success' || needs.docker-build.result == 'failure')
    needs:
    - docker-build
    timeout-minutes: 60
    concurrency:
      group: deployment-post-deploy-validation
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v4
    - name: Run Post-Deploy Validation
      uses: ./.github/actions/post-deploy-validation
      timeout-minutes: 30
  pipeline-post:
    name: Pipeline Post Actions
    runs-on: ubuntu-latest
    needs:
    - initialize
    - static-analysis
    - security-scan
    - license-check
    - quality-gate
    - build-test
    - docker-build
    - deploy-to-staging
    - integration-tests
    - performance-tests
    - production-approval
    - deploy-to-production
    - post-deploy-validation
    if: always()
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - name: Publish HTML (always) - MANUAL CONVERSION REQUIRED
      if: always()
      run: "\n# MANUAL CONVERSION REQUIRED: PublishHTML Plugin\n# Original Jenkins feature: publishHTML([\n                        allowMissing: true,\n                        alwaysLinkToLastBuild: true,\n                        keepAll: true,\n                        reportDir: 'target/site/jacoco',\n                        reportFiles: 'index.html',\n                        reportName: 'Code Coverage'\n                    ])\n# Action needed: Review Jenkins documentation and implement equivalent logic\n# TODO: Implement this functionality manually\n"
      shell: bash
