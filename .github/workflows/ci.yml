name: CI Pipeline
'on':
  push:
    branches:
    - master
    - main
    - develop
  pull_request:
    branches:
    - master
    - main
    - develop
  workflow_dispatch:
    inputs:
      APP_NAME:
        description: Application name
        required: false
        default: complex-java-app
        type: string
      DOCKER_TAG:
        description: Docker tag for build
        required: false
        default: latest
        type: string
      RUN_SECURITY_SCANS:
        description: Enable SAST/SCA checks?
        required: false
        default: true
        type: boolean
      DEPLOY_ENV:
        description: Target environment
        required: false
        default: dev
        type: choice
        options:
        - dev
        - qa
        - stg
        - prd
env:
  # REGISTRY: ghcr.io/prasannavaka81
  # IMAGE: ${{ env.REGISTRY }}/${{ inputs.APP_NAME }}
  # SONARQUBE_SERVER: http://10.138.77.59:9000
  MAVEN_OPTS: -Dmaven.test.failure.ignore=false -DskipTests
permissions:
  contents: read
  actions: read
  security-events: write
  deployments: write
  checks: write
jobs:
  # checkout:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Run Checkout
  #     uses: ./.github/actions/checkout
  #   continue-on-error: true
  set-java-maven:
    runs-on: ubuntu-latest
    # needs: checkout
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Set Java & Maven
      uses: ./.github/actions/set-java-maven
  build-unit-test:
    runs-on: ubuntu-latest
    needs: set-java-maven
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Build & Unit Test
      uses: ./.github/actions/build-unit-test
  # static-code-analysis-sonarqube:
  #   runs-on: ubuntu-latest
  #   needs: build-unit-test
  #   timeout-minutes: 60
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #   - name: Run Static Code Analysis (SonarQube)
  #     uses: ./.github/actions/static-code-analysis-sonarqube
  #     with:
  #       sonar-token: ${{ secrets.SONAR_TOKEN }}
  #       sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
  quality-gate:
    runs-on: ubuntu-latest
    needs: build-unit-test
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Quality Gate
      uses: ./.github/actions/quality-gate
    continue-on-error: true
  security-scans:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.RUN_SECURITY_SCANS
    needs: quality-gate
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Security Scans
      uses: ./.github/actions/security-scans
  build-push-docker-image:
    runs-on: ubuntu-latest
    needs:
    - quality-gate
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Build & Push Docker Image
      uses: ./.github/actions/build-push-docker-image
      with:
        docker-username: ${{ secrets.DOCKER_USERNAME }}
        docker-password: ${{ secrets.DOCKER_PASSWORD }}
        # registry-cred-username: ${{ secrets.REGISTRY_CRED_USERNAME }}
        # registry-cred-password: ${{ secrets.REGISTRY_CRED_PASSWORD }}
        image-name: prasannavaka81/githubactions1
        build-tag: ${{ github.sha }}
        registry: docker.io
      timeout-minutes: 30
    if: always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'failure')
  manual-approval-for-deploy:
    runs-on: ubuntu-latest
    if: always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'failure')
    needs:
    - quality-gate
    timeout-minutes: 60
    concurrency:
      group: deployment-manual-approval-for-deploy
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v4
    - name: Run Manual Approval for Deploy
      uses: ./.github/actions/manual-approval-for-deploy
  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs:
    - quality-gate
    timeout-minutes: 60
    concurrency:
      group: deployment-deploy-to-kubernetes
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v4
    - name: Run Deploy to Kubernetes
      uses: ./.github/actions/deploy-to-kubernetes
      with:
        app-name: complex-java-app
        container-name: complex-java-app-container
        deploy-env: dev
        image-name: prasannavaka81/githubactions1
        build-tag: ${{ github.sha }}
      timeout-minutes: 30
    if: always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'failure')
  smoke-test:
    runs-on: ubuntu-latest
    needs:
    - quality-gate
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Smoke Test
      uses: ./.github/actions/smoke-test
    if: always() && (needs.quality-gate.result == 'success' || needs.quality-gate.result == 'failure')
  pipeline-post:
    name: Pipeline Post Actions
    runs-on: ubuntu-latest
    needs:
    - set-java-maven
    - build-unit-test
    # - static-code-analysis-sonarqube
    - quality-gate
    - security-scans
    - build-push-docker-image
    - manual-approval-for-deploy
    - deploy-to-kubernetes
    - smoke-test
    if: always()
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - name: Publish test results (always)
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Pipeline Test Results (always)
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit
      continue-on-error: false
      
  generate-workflow-metrics:
    runs-on: ubuntu-latest
    if: always() # Run even if other jobs fail
    needs: [pipeline-post] # Run after your main pipeline
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install PyYAML
      run: pip install PyYAML
      
    - name: Generate Workflow Metrics
      run: |
        # Download and run the metrics script
        curl -o metrics.py https://raw.githubusercontent.com/VakaPrasanna/githubactions/main/metrics.py
        python metrics.py
        
    - name: Upload Metrics
      uses: actions/upload-artifact@v4
      with:
        name: workflow-metrics
        path: |
          workflow_metrics_*.json
          workflow_metrics_*.csv
