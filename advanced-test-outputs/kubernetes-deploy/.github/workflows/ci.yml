name: CI Pipeline
'on':
  push:
    branches:
    - master
    - main
    - develop
  pull_request:
    branches:
    - master
    - main
    - develop
  workflow_dispatch:
    inputs:
      IMAGE_TAG:
        description: Docker image tag to deploy
        required: false
        default: latest
        type: string
      RUN_MIGRATIONS:
        description: Run database migrations?
        required: false
        default: false
        type: boolean
      ENVIRONMENT:
        description: Deployment environment
        required: false
        default: dev
        type: choice
        options:
        - dev
        - staging
        - production
env:
  HELM_CHART_PATH: ./helm/myapp
  NAMESPACE: ${{ inputs.ENVIRONMENT }}
permissions:
  contents: read
  actions: read
  security-events: write
  deployments: write
  checks: write
jobs:
  checkout:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Checkout
      uses: ./.github/actions/checkout
  validate-kubernetes-config:
    runs-on: ubuntu-latest
    needs: checkout
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Validate Kubernetes Config
      uses: ./.github/actions/validate-kubernetes-config
      timeout-minutes: 30
  database-migration:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && params.RUN_MIGRATIONS
    needs: validate-kubernetes-config
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Database Migration
      uses: ./.github/actions/database-migration
      timeout-minutes: 30
  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs:
    - validate-kubernetes-config
    timeout-minutes: 60
    concurrency:
      group: deployment-deploy-to-kubernetes
      cancel-in-progress: false
    steps:
    - uses: actions/checkout@v4
    - name: Run Deploy to Kubernetes
      uses: ./.github/actions/deploy-to-kubernetes
      timeout-minutes: 30
    if: always() && (needs.validate-kubernetes-config.result == 'success' || needs.validate-kubernetes-config.result == 'failure')
  smoke-tests:
    runs-on: ubuntu-latest
    needs:
    - validate-kubernetes-config
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Smoke Tests
      uses: ./.github/actions/smoke-tests
      timeout-minutes: 30
    if: always() && (needs.validate-kubernetes-config.result == 'success' || needs.validate-kubernetes-config.result == 'failure')
  production-approval:
    runs-on: ubuntu-latest
    if: always() && (needs.validate-kubernetes-config.result == 'success' || needs.validate-kubernetes-config.result == 'failure')
    needs:
    - validate-kubernetes-config
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v4
    - name: Run Production Approval
      uses: ./.github/actions/production-approval
  pipeline-post:
    name: Pipeline Post Actions
    runs-on: ubuntu-latest
    needs:
    - checkout
    - validate-kubernetes-config
    - database-migration
    - deploy-to-kubernetes
    - smoke-tests
    - production-approval
    if: always()
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v4
    - name: Slack notification (success)
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: ${{ secrets.SLACK_CHANNEL }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    - name: Slack notification (failure)
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: ${{ secrets.SLACK_CHANNEL }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
